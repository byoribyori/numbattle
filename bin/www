#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('numbattle:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var io = require('socket.io')(server);
var wait = false;
var wait_data = [null, null];

io.on('connection', (socket) => {
  socket.emit('info', wait_data[1]);
  socket.on('ready', (name) => {
    if (!wait) {
      socket.emit('wait', socket.id);
      io.emit('wait_name', name);
      wait_data = [socket.id, name];
    } else {
      io.to(wait_data[0]).emit('start', [socket.id, name]);
      socket.emit('start', wait_data);
      io.emit('wait_end');
      wait_data = [null, null];
    }
    wait = !wait;
  });

  socket.on('cancel', () => {
    wait = false;
    wait_data = [null, null];;
    io.emit('wait_end');
  });

  socket.on('number', (number) => {
    io.to(number[0]).emit('number', number[1]);
  });

  socket.on('msg', (msg) => {
    io.to(msg[0]).emit('msg', msg[1]);
  });
});
